/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.cms.gui;

import com.mycompany.cms.util.Connector;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.mindrot.jbcrypt.BCrypt;


public class StaffPanel extends javax.swing.JPanel {

   
    public StaffPanel() {
        initComponents();
        // @ open refreshes the table to show data
        refreshTable();
        jtable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    // Handle the selection change
                    getDataFromSelectedRow();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        JTF_FN = new javax.swing.JTextField();
        JTF_LN = new javax.swing.JTextField();
        JTF_EMAIL = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtable1 = new javax.swing.JTable();
        jCheckBox1 = new javax.swing.JCheckBox();
        JTF_SEARCH = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        JPF1 = new javax.swing.JPasswordField();
        JPF2 = new javax.swing.JPasswordField();
        CHX_ADMINFILTER = new javax.swing.JComboBox<>();
        SEARCH_BTN = new javax.swing.JButton();
        JTB1_BTN = new javax.swing.JToggleButton();
        ADD_BTN = new javax.swing.JButton();
        EDIT_BTN = new javax.swing.JButton();
        REFRESH_BTN = new javax.swing.JButton();
        DELETE_BTN = new javax.swing.JButton();
        CP_BTN = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setLabelFor(JTF_FN);
        jLabel1.setText("First Name");

        jLabel2.setLabelFor(JTF_LN);
        jLabel2.setText("Last Name");

        jLabel3.setLabelFor(JTF_EMAIL);
        jLabel3.setText("Email");

        jLabel4.setLabelFor(jLabel4);
        jLabel4.setText("Password");

        JTF_FN.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        JTF_FN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTF_FNActionPerformed(evt);
            }
        });

        JTF_LN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTF_LNActionPerformed(evt);
            }
        });

        JTF_EMAIL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTF_EMAILActionPerformed(evt);
            }
        });

        jtable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "First Name", "Last Name", "Email", "Admin"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtable1);
        if (jtable1.getColumnModel().getColumnCount() > 0) {
            jtable1.getColumnModel().getColumn(0).setResizable(false);
            jtable1.getColumnModel().getColumn(1).setResizable(false);
            jtable1.getColumnModel().getColumn(2).setResizable(false);
            jtable1.getColumnModel().getColumn(3).setResizable(false);
            jtable1.getColumnModel().getColumn(4).setResizable(false);
        }

        jCheckBox1.setText("Show");
        jCheckBox1.setToolTipText("");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        JTF_SEARCH.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        JTF_SEARCH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTF_SEARCHMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                JTF_SEARCHMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                JTF_SEARCHMouseExited(evt);
            }
        });
        JTF_SEARCH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTF_SEARCHActionPerformed(evt);
            }
        });

        jLabel7.setLabelFor(jLabel7);
        jLabel7.setText("Search");

        jLabel6.setLabelFor(jLabel4);
        jLabel6.setText("Confirm Password");

        JPF1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JPF1ActionPerformed(evt);
            }
        });

        CHX_ADMINFILTER.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Admin" }));
        CHX_ADMINFILTER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CHX_ADMINFILTERActionPerformed(evt);
            }
        });

        SEARCH_BTN.setText("Search");
        SEARCH_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SEARCH_BTNActionPerformed(evt);
            }
        });

        JTB1_BTN.setBackground(new java.awt.Color(247, 222, 200));
        JTB1_BTN.setText("Admin");
        JTB1_BTN.setActionCommand("");
        JTB1_BTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(247, 222, 200)));
        JTB1_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTB1_BTNActionPerformed(evt);
            }
        });

        ADD_BTN.setBackground(new java.awt.Color(255, 153, 0));
        ADD_BTN.setForeground(new java.awt.Color(255, 255, 255));
        ADD_BTN.setText("Save");
        ADD_BTN.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 153, 0), 1, true));
        buttonGroup1.add(ADD_BTN);
        ADD_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADD_BTNActionPerformed(evt);
            }
        });

        EDIT_BTN.setBackground(new java.awt.Color(255, 153, 0));
        EDIT_BTN.setForeground(new java.awt.Color(255, 255, 255));
        EDIT_BTN.setText("Update");
        EDIT_BTN.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 153, 0), 1, true));
        EDIT_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EDIT_BTNActionPerformed(evt);
            }
        });

        REFRESH_BTN.setText("Refresh");
        REFRESH_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                REFRESH_BTNActionPerformed(evt);
            }
        });

        DELETE_BTN.setBackground(new java.awt.Color(255, 153, 0));
        DELETE_BTN.setForeground(new java.awt.Color(255, 255, 255));
        DELETE_BTN.setText("Delete");
        DELETE_BTN.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 153, 0), 1, true));
        DELETE_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DELETE_BTNActionPerformed(evt);
            }
        });

        CP_BTN.setBackground(new java.awt.Color(255, 153, 0));
        CP_BTN.setForeground(new java.awt.Color(255, 255, 255));
        CP_BTN.setText("Change Password");
        CP_BTN.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 153, 0), 1, true));
        CP_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CP_BTNActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setText("Accounts");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6)
                    .addComponent(JPF1)
                    .addComponent(JTF_EMAIL)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JPF2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JTF_FN, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JTF_LN, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jCheckBox1)
                    .addComponent(JTB1_BTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(EDIT_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CP_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ADD_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(DELETE_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JTF_SEARCH, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SEARCH_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(REFRESH_BTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(CHX_ADMINFILTER, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(235, 235, 235))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JTF_SEARCH, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SEARCH_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CHX_ADMINFILTER, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(REFRESH_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JTF_LN, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JTF_FN, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JTF_EMAIL, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JPF1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JPF2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(jCheckBox1)
                        .addGap(18, 18, 18)
                        .addComponent(JTB1_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ADD_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DELETE_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EDIT_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CP_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

  // Function that allows you to get data from the table
  private void getDataFromSelectedRow(){
  int selectedRow = jtable1.getSelectedRow();

        if (selectedRow == -1) {
            
            return;
        }

        int userId = (int) jtable1.getValueAt(selectedRow, 0);
        String firstName = (String) jtable1.getValueAt(selectedRow, 1);
        String lastName = (String) jtable1.getValueAt(selectedRow, 2);
        String email = (String) jtable1.getValueAt(selectedRow, 3);
        
        boolean isAdmin = (boolean) jtable1.getValueAt(selectedRow, 4);

        
        JTF_FN.setText(firstName);
        JTF_LN.setText(lastName);
        JTF_EMAIL.setText(email);
        jCheckBox1.setSelected(isAdmin);
    
    }
  // Shows the content of the table
    private void refreshTable() {       
   try {
            Connector connector = new Connector();
            Connection con = connector.getConnection();
            JTF_FN.setText("");
            JTF_LN.setText("");
            JTF_EMAIL.setText("");
            JTF_SEARCH.setText("");
            JPF1.setText("");
            JPF2.setText("");

            String query = "SELECT user_id, first_name, last_name, email, password, is_admin FROM users";

            try (PreparedStatement pstmt = con.prepareStatement(query);
                 ResultSet resultSet = pstmt.executeQuery()) {

                DefaultTableModel model = (DefaultTableModel) jtable1.getModel();
                model.setRowCount(0);

                while (resultSet.next()) {
                    int userId = resultSet.getInt("user_id");
                    String firstName = resultSet.getString("first_name");
                    String lastName = resultSet.getString("last_name");
                    String email = resultSet.getString("email");
                    boolean isAdmin = resultSet.getBoolean("is_admin");

                    model.addRow(new Object[]{userId, firstName, lastName, email, isAdmin});
                }
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
}
// Filters the table by searching through first name, last name , email, 
private void applyFilter(String filterText) {
     try {
        Connector connector = new Connector();
        Connection con = connector.getConnection();

        String query = "SELECT user_id, first_name, last_name, email, password, is_admin FROM users " +
                       "WHERE user_id LIKE ? OR first_name LIKE ? OR last_name LIKE ? OR email LIKE ? OR is_admin LIKE ?";

        try (PreparedStatement pstmt = con.prepareStatement(query)) {
            for (int i = 1; i <= 5; i++) {
                pstmt.setString(i, "%" + filterText + "%");
            }

            try (ResultSet resultSet = pstmt.executeQuery()) {
                DefaultTableModel model = (DefaultTableModel) jtable1.getModel();
                model.setRowCount(0);

                while (resultSet.next()) {
                    int userId = resultSet.getInt("user_id");
                    String firstName = resultSet.getString("first_name");
                    String lastName = resultSet.getString("last_name");
                    String email = resultSet.getString("email");
                    boolean isAdmin = resultSet.getBoolean("is_admin");
                     
                    model.addRow(new Object[]{userId, firstName, lastName, email, isAdmin});
                }
            }
        }
    } catch (SQLException e) {
        System.out.println(e);
    }
}



// Filter for Checkbox admin

private void applyFilter() {
    String filterOption = (String) CHX_ADMINFILTER.getSelectedItem();

    try {
        Connector connector = new Connector();
        Connection con = connector.getConnection();

        String query;
        if ("All".equals(filterOption)) {
            query = "SELECT user_id, first_name, last_name, email, password, is_admin FROM users";
        } else {
            query = "SELECT user_id, first_name, last_name, email, password, is_admin FROM users WHERE is_admin = 1";
        }

        try (PreparedStatement pstmt = con.prepareStatement(query);
             ResultSet resultSet = pstmt.executeQuery()) {

            DefaultTableModel model = (DefaultTableModel) jtable1.getModel();
            model.setRowCount(0);

            while (resultSet.next()) {
                int userId = resultSet.getInt("user_id");
                String firstName = resultSet.getString("first_name");
                String lastName = resultSet.getString("last_name");
                String email = resultSet.getString("email");
                boolean isAdmin = resultSet.getBoolean("is_admin");

                model.addRow(new Object[]{userId, firstName, lastName, email, isAdmin});
            }
        }
    } catch (SQLException e) {
        System.out.println(e);
    }
}



    private void JTF_LNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTF_LNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTF_LNActionPerformed

    private void JTF_SEARCHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTF_SEARCHActionPerformed
       //Search bar for the table 
        if (JTF_SEARCH.getText().equals("")){
             refreshTable();   
        }
        String search =JTF_SEARCH.getText();
        applyFilter(search);
    }//GEN-LAST:event_JTF_SEARCHActionPerformed

    private void JTF_EMAILActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTF_EMAILActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTF_EMAILActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown

    }//GEN-LAST:event_formComponentShown

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
     
    }//GEN-LAST:event_formMouseDragged

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved

    }//GEN-LAST:event_formMouseMoved

    private void JTF_FNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTF_FNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTF_FNActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
       getDataFromSelectedRow();
    }//GEN-LAST:event_formMouseClicked

    private void JTF_SEARCHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTF_SEARCHMouseClicked
       // TODO add your handling code here:
    }//GEN-LAST:event_JTF_SEARCHMouseClicked

    private void JTF_SEARCHMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTF_SEARCHMouseEntered
    
    }//GEN-LAST:event_JTF_SEARCHMouseEntered

    private void JTF_SEARCHMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTF_SEARCHMouseExited

    }//GEN-LAST:event_JTF_SEARCHMouseExited

    private void JPF1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JPF1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JPF1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if(jCheckBox1.isSelected()){
        JPF1.setEchoChar((char)0);
        JPF2.setEchoChar((char)0);
        }
        else{
        JPF1.setEchoChar('\u25cf');
        JPF2.setEchoChar('\u25cf');
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void SEARCH_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SEARCH_BTNActionPerformed
        String filterText = JTF_SEARCH.getText();
            applyFilter(filterText);
    }//GEN-LAST:event_SEARCH_BTNActionPerformed

    private void CHX_ADMINFILTERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CHX_ADMINFILTERActionPerformed
            applyFilter();            
    }//GEN-LAST:event_CHX_ADMINFILTERActionPerformed

    private void JTB1_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTB1_BTNActionPerformed
        if (JTB1_BTN.isSelected()){
            JTB1_BTN.setBackground(new Color(247,222,200));
        }else{
             JTB1_BTN.setBackground(new Color(247,222,200));
        }
        
        
    }//GEN-LAST:event_JTB1_BTNActionPerformed

    private void REFRESH_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_REFRESH_BTNActionPerformed
        refreshTable();
    }//GEN-LAST:event_REFRESH_BTNActionPerformed

    private void EDIT_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EDIT_BTNActionPerformed
   int selectedRow = jtable1.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a row to edit", "Error", JOptionPane.ERROR_MESSAGE);
                return;
  
            }else{
             if(JPF1.getText().equals("") == false){
            JOptionPane.showMessageDialog(this, "Use Change Password button to update password"); 
             }
             else{
             if (JTF_FN.getText().equals("")|| JTF_LN.getText().equals("")|| JTF_EMAIL.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Missing Information", "Missing Information", JOptionPane.WARNING_MESSAGE);
            
            }

            if (!validateFields()) {
                JOptionPane.showMessageDialog(this, "Please fill in all required fields", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int userId = (int) jtable1.getValueAt(selectedRow, 0);
            String firstName = JTF_FN.getText();
            String lastName = JTF_LN.getText();
            String email = JTF_EMAIL.getText();
            boolean admin = JTB1_BTN.isSelected();

            String query = "UPDATE users SET first_name=?, last_name=?, email=?,is_admin=? WHERE user_id=?";

            try {
                Connector connector = new Connector();
                Connection con = connector.getConnection();

                try (PreparedStatement pstmt = con.prepareStatement(query)) {
                    pstmt.setString(1, firstName);
                    pstmt.setString(2, lastName);
                    pstmt.setString(3, email);
                    pstmt.setBoolean(4, admin);
                    pstmt.setInt(5, userId);

                    pstmt.executeUpdate();
                    refreshTable();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error updating data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                System.out.println(e);
            }
        }
   
      
        }
    }//GEN-LAST:event_EDIT_BTNActionPerformed
        private boolean validateFields() {

            String firstName = JTF_FN.getText();
            String lastName = JTF_LN.getText();
            String email = JTF_EMAIL.getText();

            return !firstName.isEmpty() && !lastName.isEmpty() && !email.isEmpty();
        }
    private void DELETE_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DELETE_BTNActionPerformed
        int[] selectedRows = jtable1.getSelectedRows();

        if (selectedRows.length == 0) {
            JOptionPane.showMessageDialog(this, "Please select one or more rows to delete", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the selected record(s)?", "Confirmation", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            String query = "DELETE FROM users WHERE user_id=?";

            try {
                Connector connector = new Connector();
                Connection con = connector.getConnection();

                try (PreparedStatement pstmt = con.prepareStatement(query)) {
                    for (int selectedRow : selectedRows) {
                        int userId = (int) jtable1.getValueAt(selectedRow, 0); // Assuming user_id is in the first column
                        pstmt.setInt(1, userId);
                        pstmt.addBatch();
                    }

                    pstmt.executeBatch();
                }

                refreshTable();

            } catch (SQLException e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_DELETE_BTNActionPerformed

    private void ADD_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADD_BTNActionPerformed
                                       
    if (JTF_FN.getText().equals("") || JTF_LN.getText().equals("") || JTF_EMAIL.getText().equals("") || JPF1.getText().equals("") || JPF2.getText().equals("")) {
        JOptionPane.showMessageDialog(this, "Missing Credentials", "Missing Credentials", JOptionPane.WARNING_MESSAGE);
    } else {
        String email = JTF_EMAIL.getText();

        // Check for duplicate email
        if (isEmailDuplicate(email)) {
            JOptionPane.showMessageDialog(this, "Duplicate email found!","Duplicate Email", JOptionPane.WARNING_MESSAGE);
        } else {
            if (JPF1.getText().equals(JPF2.getText())) {
                String FirstName = JTF_FN.getText();
                String LastName = JTF_LN.getText();
                String Email = JTF_EMAIL.getText();
                String Password = JPF1.getText();

                int Admin = 0;
                if (JTB1_BTN.isSelected()) {
                    Admin = 1;
                }
                String hashedPassword = BCrypt.hashpw(Password, BCrypt.gensalt());
                String query = "INSERT INTO users (first_name, last_name, email, password, is_admin) VALUES (?, ?, ?, ?, ?)";

                try {
                    Connector connector = new Connector();
                    Connection con = connector.getConnection();

                    // Create a PreparedStatement with the given query
                    try (PreparedStatement pstmt = con.prepareStatement(query)) {
                        // Set values for the placeholders in the query
                        pstmt.setString(1, FirstName);
                        pstmt.setString(2, LastName);
                        pstmt.setString(3, Email);
                        pstmt.setString(4, hashedPassword);
                        pstmt.setInt(5, Admin);

                        // Execute the query
                        pstmt.executeUpdate();
                        refreshTable();
                    }
                } catch (SQLException e) {
                    System.out.println(e);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Passwords do not Match!");
            }
        }
    }
    }//GEN-LAST:event_ADD_BTNActionPerformed
private boolean isEmailDuplicate(String email) {
    DefaultTableModel model = (DefaultTableModel) jtable1.getModel();
    int rowCount = model.getRowCount();
    for (int i = 0; i < rowCount; i++) {
        if (email.equals(model.getValueAt(i, 3))) { // Assuming email is in the fourth column
            return true; // Duplicate found
        }
    }
    return false; // No duplicate found
}
             
       
    private void CP_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CP_BTNActionPerformed
        if (JPF2.getText().equals("")|| JPF1.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Missing Information", "Missing Information", JOptionPane.WARNING_MESSAGE);
        }
        else{
            int selectedRow = jtable1.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a user to change password", "Error", JOptionPane.ERROR_MESSAGE);
                return ;
            }

            int option = JOptionPane.showConfirmDialog(this, "Confirm Update Password?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                
                   String password = JPF1.getText();

            String hashedPassword = BCrypt.hashpw(password, BCrypt.gensalt());
            String query = "UPDATE users SET password=?";
            
            try {
                Connector connector = new Connector();
                Connection con = connector.getConnection();
                  
                try (PreparedStatement pstmt = con.prepareStatement(query)) {
                    pstmt.setString(1, hashedPassword);
                    pstmt.executeUpdate();
                    refreshTable();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error updating data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                System.out.println(e);
            }
        }   
   }
        
            
            
            
            
            
            
            
            
            
            
            
            
            
         
    }//GEN-LAST:event_CP_BTNActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ADD_BTN;
    private javax.swing.JComboBox<String> CHX_ADMINFILTER;
    private javax.swing.JButton CP_BTN;
    private javax.swing.JButton DELETE_BTN;
    private javax.swing.JButton EDIT_BTN;
    private javax.swing.JPasswordField JPF1;
    private javax.swing.JPasswordField JPF2;
    private javax.swing.JToggleButton JTB1_BTN;
    private javax.swing.JTextField JTF_EMAIL;
    private javax.swing.JTextField JTF_FN;
    private javax.swing.JTextField JTF_LN;
    private javax.swing.JTextField JTF_SEARCH;
    private javax.swing.JButton REFRESH_BTN;
    private javax.swing.JButton SEARCH_BTN;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtable1;
    // End of variables declaration//GEN-END:variables
}
